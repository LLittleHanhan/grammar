Program ::= ProgramHead DeclarePart ProgramBody .
ProgramHead ::= PROGRAM ProgramName
ProgramName ::= ID
DeclarePart ::= TypeDecpart VarDecpart ProcDecpart
TypeDecpart ::= $ | TypeDec
TypeDec ::= TYPE TypeDecList
TypeDecList ::= TypeId = TypeDef ; TypeDecMore
TypeDecMore ::= $ | TypeDecList
TypeId ::= ID
TypeDef ::= BaseType | StructureType | ID
BaseType ::= INTEGER | CHAR
StructureType ::= ArrayType | RecType
ArrayType ::= ARRAY [ Low .. Top ] OF BaseType
Low ::= INTC
Top ::= INTC
RecType ::= RECORD FieldDecList END
FieldDecList ::= BaseType IdList ; FieldDecMore | ArrayType IdList ; FieldDecMore
FieldDecMore ::= $ | FieldDecList
IdList ::= ID IdMore
IdMore ::= $ | , IdList
VarDecpart ::= $ | VarDec
VarDec ::= VAR VarDecList
VarDecList ::= TypeDef VarIdList ; VarDecMore
VarDecMore ::= $ | VarDecList
VarIdList ::= ID VarIdMore
VarIdMore ::= $ | , VarIdList
ProcDecpart ::= $ | ProcDec
ProcDec ::= PROCEDURE ProcName ( ParamList ) ; inProcDecpart ProcBody ProcDecMore
ProcDecMore ::= $ | ProcDec
ProcName ::= ID
ParamList ::= $ | ParamDecList
ParamDecList ::= Param ParamMore
ParamMore ::= $ | ; ParamDecList
Param ::= TypeDef FormList | VAR TypeDef FormList
FormList ::= ID FidMore
FidMore ::= $ | , FormList
inProcDecpart ::= DeclarePart
ProcBody ::= ProgramBody
ProgramBody ::= BEGIN StmList END
StmList ::= Stm StmMore
StmMore ::= $ | ; StmList
Stm ::= ConditionalStm | LoopStm | InputStm | OutputStm | ReturnStm | ID AssCall
AssCall ::= AssignmentRest | CallStmRest
AssignmentRest ::= VariMore = Exp
ConditionalStm ::= IF RelExp THEN StmList ELSE StmList FI
LoopStm ::= WHILE RelExp DO StmList ENDWH
InputStm ::= READ ( Invar )
Invar ::= ID
OutputStm ::= WRITE ( Exp )
ReturnStm ::= RETURN ( Exp )
CallStmRest ::= ( ActParamList )
ActParamList ::= $ | Exp ActParamMore
ActParamMore ::= $ | , ActParamList
RelExp ::= Exp OtherRelE
OtherRelE ::= CmpOp Exp
Exp ::= Term OtherTerm
OtherTerm ::= $ | AddOp Exp
Term ::= Factor OtherFactor
OtherFactor ::= $ | MultOp Term
Factor ::= ( Exp ) | INTC | Variable
Variable ::= ID VariMore
VariMore ::= $ | [ Exp ] | . FieldVar
FieldVar ::= ID FieldVarMore
FieldVarMore ::= $ | [ Exp ]
CmpOp ::= < | =
AddOp ::= + | -
MultOp ::= * | /